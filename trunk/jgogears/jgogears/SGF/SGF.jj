


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER =false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(SGF)
 package sufgo.SGF;
 import java.util.*;
 import sufgo.*;

public class SGF {
 
}

PARSER_END(SGF)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN :
{
  <SEMI: ";">
| <OPENR: "(">
| <CLOSER: ")">
| <NAME:  ( ["A"-"Z"]) +  >
| <VALUE:   "[" ( ( ( "\\" [" "-"~"] ) | ~[ "]", "\\" ]  ) *  ) "]"  >
//| <VALUE:   "[" ( [" "-"\\", "^"-"~"]  ) * "]" >
}



Vector<SGFGameTree> collection() :
 { 
    SGFGameTree gameTree = null;
    Vector<SGFGameTree> games = new Vector<SGFGameTree>(); 
 }
 {
   (
    gameTree = gameTree()
    { games.add(gameTree); }
    ) +
    {return games;}
 }
 
 SGFGameTree gameTree() :
 {
  SGFSequence sequence = null;
  SGFGameTree child = null;
  SGFGameTree result = new SGFGameTree();
 }
 {
   <OPENR> 
  
     sequence = sequence()	
     {result.sequence = sequence;}	  
     (
       child = gameTree()
       { result.gameTrees.add(child); }
      ) *
  
   <CLOSER> 
   {return result;}
 }
 
 SGFSequence sequence () :
 {
 SGFSequence result = new SGFSequence();
 SGFNode node = null;
 }
 {
   (
     node = node()
     {result.add(node);}
    ) +
    {return result;}
 }
 SGFNode node() :
 {
   SGFNode result = new SGFNode();
   SGFProperty prop = null;
 }
 {
  <SEMI>
  (
      prop = prop()
      {result.properties.add(prop);}
  ) *
  {return result;}
 }
 
 SGFProperty prop() :
 {
  Token name = null;
  Token value = null;
  SGFProperty result = new SGFProperty();
 }
 {
   name=<NAME>
   {result.setIdentifier(new String(name.image));}
   (
      value =<VALUE>
      {result.getValues().add(value.image);}
    ) +
 	{return result;	}
 }
 
/**

  Collection = GameTree { GameTree }
  GameTree   = "(" Sequence { GameTree } ")"
  Sequence   = Node { Node }
  Node       = ";" { Property }
  Property   = PropIdent PropValue { PropValue }
  PropIdent  = UcLetter { UcLetter }
  PropValue  = "[" CValueType "]"
  CValueType = (ValueType | Compose)
  ValueType  = (None | Number | Real | Double | Color | SimpleText |
		Text | Point  | Move | Stone)


'list of':    PropValue { PropValue }
'elist of':   ((PropValue { PropValue }) | None)
              In other words elist is list or "[]".

		 UcLetter   = "A".."Z"
  Digit      = "0".."9"
  None       = ""

  Number     = [("+"|"-")] Digit { Digit }
  Real       = Number ["." Digit { Digit }]

  Double     = ("1" | "2")
  Color      = ("B" | "W")

  SimpleText = { any character (handling see below) }
  Text       = { any character (handling see below) }

  Point      = game-specific
  Move       = game-specific
  Stone      = game-specific

  Compose    = ValueType ":" ValueType
  
  List of point: list of (point | composition of point ":" point)
  */
		
		
		/**

This file contains java 5 templates, so a modern version of javacc is required

cd "C:\Documents and Settings\stuart\workspace\sufgo\sufgo\SGF"
..\..\..\..\javacc-4.0\bin\javacc SGF.jj

syeates@syeates-laptop:~/workspace/mii/sufgo/SGF$ /usr/lib/jvm/java-1.5.0-sun/bin/java -classpath /home/syeates/Desktop/javacc-4.0/bin/lib/javacc.jar javacc SGF.jj



		*/
		